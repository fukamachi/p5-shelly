#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

$fatpacked{"App/shelly.pm"} = <<'APP_SHELLY';
  package App::shelly;
  
  use strict;
  use warnings;
  
  use Getopt::Long qw(:config gnu_getopt pass_through);
  use File::Which qw(which);
  
  use App::shelly::impl;
  use App::shelly::config qw(config dumped_core_path);
  
  sub impl {
      sub { App::shelly::impl->param(@_); }
  }
  
  sub new {
      my ($class) = @_;
  
      return bless {
          lisp_impl => $ENV{LISP_IMPL} || config->{default_lisp},
          load_libraries => [],
          argv           => [],
      }, $class;
  }
  
  sub parse_options {
      my ( $self, @argv ) = @_;
  
      local @ARGV = @{ $self->{argv} };
      push @ARGV, @argv;
  
      GetOptions(
          'help|h'   => \$self->{help},
          'impl|I=s' => \$self->{lisp_impl},
          'load|L=s' => \my $libraries,
          'no-init'  => \$self->{noinit},
          'verbose'  => \$self->{verbose},
          'debug'    => \$self->{debug},
      );
  
      if ($libraries) {
          $self->{load_libraries} = [ split ',', $libraries ];
      }
  
      $self->{argv} = \@ARGV;
  
      if ( $self->{help} ) {
          $self->{noinit} = 1;
          $self->{argv}   = ['shelly::help'];
      }
  }
  
  sub doit {
      my ($self) = @_;
  
      unless ( $self->{lisp_impl} ) {
          $self->{lisp_impl} = $self->detect_installed_lisp;
      }
  
      local $ENV{LISP_IMPL} = $self->{lisp_impl};
  
      unless ( impl->('impl_name') ) {
          print "Unsupported CL implementation: @{[ $self->{lisp_impl} ]}\n";
          print qq(It must be one of "sbcl", "ccl", "alisp", "clisp", "cmucl" or "ecl".\n);
          exit 1;
      }
  
      my $command = $self->_build_command;
  
      if ( $self->{debug} ) {
          print $command, "\n";
      }
  
      system(qq($command 2>&1));
  }
  
  sub _build_command {
      my ($self) = @_;
  
      my $lisp_bin = $ENV{LISP_BINARY} || impl->('binary') || $self->{lisp_impl};
  
      $ENV{LISP_BINARY} = $lisp_bin;
  
      if ( $self->{noinit} ) {
          $lisp_bin .= ' ' . impl->('noinit_option');
      }
  
      my @evals = ();
  
      if ( -e dumped_core_path ) {
          $lisp_bin = join ' ',
            ( $lisp_bin, impl->('core_option'), dumped_core_path );
      }
      else {
          unless ( $self->{lisp_impl} eq 'ecl' ) {
              print STDERR
  "Warning: Core image wasn't found. It is probably slow, isn't it? Try \"shly dump-core\".\n";
          }
  
          push @evals, <<END_OF_LISP;
  (let ((*standard-output* (make-broadcast-stream)))
    (handler-case #+quicklisp (ql:quickload :shelly) #-quicklisp (asdf:load-system :shelly)
      (#+quicklisp ql::system-not-found #-quicklisp asdf:missing-component (c)
       (format *error-output* "~&Error: ~A~&" c)
       #+quicklisp
       (format *error-output* "~&Try (ql:update-all-dists) to ensure your dist is up to date.~%")
       #+allegro (exit 1 :quiet t)
       #-allegro (quit)))
    (values))
  END_OF_LISP
          push @evals, '(shelly.util::shadowing-use-package :shelly)';
      }
  
      if ( config->{version} ) {
          push @evals,
            qq((shelly.util::check-version "@{[ config->{version} ]}"));
      }
  
      for ( @{ $self->{load_libraries} } ) {
          push @evals, "(shelly.util::load-systems :$_)";
      }
  
      if (-f "shlyfile") {
          push @evals, '(shelly.util::load-shlyfile #P"shlyfile")';
      }
  
      {
          my @args = @{ $self->{argv} };
  
          if ( @args > 0 ) {
              s/^\'/'\\''/ for @args;
              my $eval_expr =
                sprintf '(shelly.core::interpret (list %s) :verbose %s)',
                ( join " ", ( map { "\"$_\"" } @args ) ),
                $self->{verbose} ? 't' : 'nil';
              push @evals, $eval_expr;
              push @evals, '(swank-backend:quit-lisp)';
          }
          else {
              push @evals, sprintf '(shelly::run-repl :verbose %s)',
                $self->{verbose} ? 't' : 'nil';
          }
      }
  
      my $command = join ' ', $lisp_bin,
        (
            impl->('pre_options')
          ? impl->('pre_options')
          : ()
        ),
        ( map { ( impl->('eval'), "'$_'" ) } @evals ),
        impl->('other_options');
  
      return $command;
  }
  
  sub detect_installed_lisp {
      print "LISP_IMPL isn't set. Auto detecting...\n";
  
      my (@lisp_impl) =
        grep { which($_) } qw(sbcl ccl alisp clisp cmucl lisp ecl);
      @lisp_impl = map { $_ eq 'lisp' ? 'cmucl' : $_ } @lisp_impl;
  
      unless (@lisp_impl) {
          print "Couldn't detect installed Lisp.\n";
          exit 1;
      }
  
      print "Installed Lisp: " . ( join ', ', @lisp_impl ) . "\n";
  
      if ( @lisp_impl > 1 ) {
          print "Which do you prefer? [@{[ $lisp_impl[0] ]}] : ";
  
          my $input = <STDIN>;
  
          {
              no warnings 'uninitialized';
              chomp $input;
          }
  
          unless ($input) {
              $input = $lisp_impl[0];
              print $input, "\n";
          }
  
          return $input;
      }
  
      return $lisp_impl[0];
  }
  
  1;
  
  __END__
  
  =head1 NAME
  
  App::shelly
  
  =head1 SYNOPSIS
  
  $ shly [options] [atom...]
  
  =head1 OPTIONS
  
  =over 4
  
  =item B<-h, --help>
  
  Show this help.
  
  =item B<-I, --impl [implementation]>
  
  Tell what Lisp implementation to use. The default is $LISP_IMPL.
  
  =item B<-L, --load [library1,library2,...]>
  
  Load libraries before executing the expression.
  
  =item B<--verbose>
  
  Print some informations.
  
  =item B<--no-init>
  
  Do not load the user init file.
  
  =item B<--debug>
  
  This flag is for Shelly developers.
  
  =back
  
  =cut
APP_SHELLY

$fatpacked{"App/shelly/config.pm"} = <<'APP_SHELLY_CONFIG';
  package App::shelly::config;
  
  use strict;
  use warnings;
  use Exporter::Lite;
  
  our @EXPORT_OK = qw(config config_path dumped_core_path);
  
  my $local_base_path = $ENV{HOME} . '/.shelly/';
  
  sub local_path {
      return $local_base_path . $_[0];
  }
  
  sub config_path {
      my ($impl) = @_;
  
      if ($impl) {
          return local_path( 'config.' . $impl );
      }
  
      return local_path('config');
  }
  
  sub dumped_core_path {
      return local_path('dumped-cores/')
        . ( $_[0] || ( $ENV{LISP_IMPL} . '.core' ) );
  }
  
  sub config {
      my $config_file = &config_path;
  
      my $config =
        -e $config_file
        ? do $config_file
        : {};
  
      return $config;
  }
  
  1;
APP_SHELLY_CONFIG

$fatpacked{"App/shelly/impl.pm"} = <<'APP_SHELLY_IMPL';
  package App::shelly::impl;
  
  use strict;
  use warnings;
  
  use Config::ENV 'LISP_IMPL';
  
  use App::shelly::config;
  
  common + {};
  
  config ccl => +{
      impl_name     => 'ccl',
      eval          => '--eval',
      other_options => '--quiet',
      binary        => App::shelly::config::config('ccl')->{binary_path},
      core_option   => '-I',
      noinit_option => '--no-init',
  };
  
  config sbcl => +{
      impl_name     => 'sbcl',
      pre_options   => '--noinform --disable-debugger',
      eval          => '--eval',
      other_options => '--quiet',
      binary        => App::shelly::config::config('sbcl')->{binary_path},
      core_option   => '--core',
      noinit_option => '--no-userinit',
  };
  
  config alisp => +{
      impl_name     => 'alisp',
      pre_options   => '-L ~/.clinit.cl',
      eval          => '-e',
      other_options => '',
      binary        => App::shelly::config::config('alisp')->{binary_path},
      core_option   => '-I',
      noinit_option => '-q',
  };
  
  config clisp => +{
      impl_name     => 'clisp',
      eval          => '-x',
      other_options => '-q --quiet',
      binary        => App::shelly::config::config('clisp')->{binary_path},
      core_option   => '-M',
      noinit_option => '-norc',
  };
  
  config cmucl => +{
      impl_name     => 'cmucl',
      eval          => '-eval',
      other_options => '-quiet -batch',
      binary => App::shelly::config::config('cmucl')->{binary_path} || 'lisp',
      core_option => '-core',
      noinit_option => '-noinit',
  };
  
  config ecl => +{
      impl_name     => 'ecl',
      eval          => '-eval',
      other_options => '-q',
      binary        => App::shelly::config::config('ecl')->{binary_path},
      noinit_option => '-norc',
  };
  
  1;
APP_SHELLY_IMPL

$fatpacked{"Config/ENV.pm"} = <<'CONFIG_ENV';
  package Config::ENV;
  
  use strict;
  use warnings;
  
  use Carp;
  
  our $VERSION = '0.11';
  
  sub import {
  	my $class   = shift;
  	my $package = caller(0);
  
  	no strict 'refs';
  	if (__PACKAGE__ eq $class) {
  		my $name    = shift;
  		my %opts    = @_;
  
  		push @{"$package\::ISA"}, __PACKAGE__;
  
  		for my $method (qw/common config parent load/) {
  			*{"$package\::$method"} = \&{__PACKAGE__ . "::" . $method}
  		}
  
  		no warnings 'once';
  		${"$package\::data"} = +{
  			common  => {},
  			envs    => {},
  			name    => $name,
  			default => $opts{default} || 'default',
  			export  => $opts{export},
  		};
  	} else {
  		my %opts    = @_;
  		my $data = _data($class);
  		if (my $export = $opts{export} || $data->{export}) {
  			*{"$package\::$export"} = sub () { $class };
  		}
  	}
  }
  
  sub _data {
  	my $package = shift || caller(1);
  	no strict 'refs';
  	no warnings 'once';
  	${"$package\::data"};
  }
  
  sub common ($) { ## no critic
  	my ($hash) = @_;
  	_data->{common} = $hash;
  }
  
  sub config ($$) { ## no critic
  	my ($name, $hash) = @_;
  	_data->{envs}->{$name} = $hash;
  	undef _data->{_merged}->{$name};
  }
  
  sub load ($) {
  	my $filename = shift;
  	my $hash = do "$filename";
  
  	croak $@ if $@;
  	croak $! unless defined $hash;
  	unless (ref($hash) eq 'HASH') {
  		croak "$filename does not return HashRef.";
  	}
  
  	wantarray ? %$hash : $hash;
  }
  
  sub parent ($) { ## no critic
  	my ($name) = @_;
  	%{ _data->{envs}->{$name} || {} };
  }
  
  sub current {
  	my ($package) = @_;
  	my $data = _data($package);
  
  	my $vals = $data->{_merged}->{$package->env} ||= +{
  		%{ $data->{common} },
  		%{ $data->{envs}->{$package->env} || {} },
  		(map { %$_ } @{ $data->{_local} || []}),
  	};
  }
  
  sub param {
  	my ($package, $name) = @_;
  	$package->current->{$name};
  }
  
  sub local {
  	my ($package, %hash) = @_;
  	not defined wantarray and croak "local returns guard object; Can't use in void context.";
  
  	my $data = _data($package);
  	$data->{_local} ||= [];
  	push @{ $data->{_local} }, \%hash;
  	undef $data->{_merged};
  
  	bless sub {
  		pop @{ $data->{_local} };
  		undef $data->{_merged};
  	}, 'Config::ENV::Local';
  }
  
  sub env {
  	my ($package) = @_;
  	my $data = _data($package);
  	$ENV{$data->{name}} || $data->{default};
  }
  
  {
  	package
  		Config::ENV::Local;
  
  	sub DESTROY {
  		my $self = shift;
  		$self->();
  	}
  };
  
  1;
  __END__
  
  =encoding utf8
  
  =head1 NAME
  
  Config::ENV - Various config determined by %ENV
  
  =head1 SYNOPSIS
  
    package MyConfig;
    
    use Config::ENV 'PLACK_ENV'; # use $ENV{PLACK_ENV} to determine config
    
    common +{
      name => 'foobar',
    };
    
    config development => +{
      dsn_user => 'dbi:mysql:dbname=user;host=localhost',
    };
    
    config test => +{
      dsn_user => 'dbi:mysql:dbname=user;host=localhost',
    };
    
    config production => +{
      dsn_user => 'dbi:mysql:dbname=user;host=127.0.0.254',
    };
    
    config production_bot => +{
      parent('production'),
      bot => 1,
    };
  
    # Use it
  
    use MyConfig;
    MyConfig->param('dsn_user'); #=> ...
  
  =head1 DESCRIPTION
  
  Config::ENV is for switching various configurations by environment variable.
  
  =head1 CONFIG DEFINITION
  
  use this module in your config package:
  
    package MyConfig;
    use Config::ENV 'FOO_ENV';
  
    common +{
      name => 'foobar',
    };
  
    config development => +{};
    config production  => +{};
  
    1;
  
  =over 4
  
  =item common($hash)
  
  Define common config. This $hash is merged with specific environment config.
  
  =item config($env, $hash);
  
  Define environment config. This $hash is just enabled in $env environment.
  
  =item parent($env);
  
  Expand $env configuration to inherit it.
  
  =item load($filename);
  
  `do $filename` and expand it. This can be used following:
  
    # MyConfig.pm
    common +{
      API_KEY => 'Set in config.pl',
      API_SECRET => 'Set in config.pl',
      load('config.pl),
    };
  
    # config.pl
    +{
      API_KEY => 'XFATEAFAFASG',
      API_SECRET => 'ced3a7927fcf22cba72c2559326be2b8e3f14a0f',
    }
  
  =back
  
  =head2 EXPORT
  
  You can specify default export name in config class. If you specify 'exports' option as following:
  
    package MyConfig;
    use Config::ENV 'FOO_ENV', exports => 'config';
  
    ...;
  
  and use it with 'config' function.
  
    package Foobar;
    use MyConfig; # exports 'config' function
  
    config->param('...');
  
  =head1 METHODS
  
  =over 4
  
  =item config->param($name)
  
  Returns config variable named $name.
  
  =item $guard = config->local(%hash)
  
  This is for scope limited config. You can use this when you use other values in temporary. Returns guard object.
  
    is config->param('name'), 'original value';
    {
      my $guard = config->local(name => 'localized');
      is config->param('name'), 'localized';
    };
    is config->param('name'), 'original value';
  
  =item config->env
  
  Returns current environment name.
  
  =item config->current
  
  Returns current configuration as HashRef.
  
  =back
  
  =head1 AUTHOR
  
  cho45 E<lt>cho45@lowreal.netE<gt>
  
  =head1 SEE ALSO
  
  =head1 LICENSE
  
  This library is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.
  
  =cut
CONFIG_ENV

$fatpacked{"Exporter.pm"} = <<'EXPORTER';
  package Exporter;
  
  require 5.006;
  
  # Be lean.
  #use strict;
  #no strict 'refs';
  
  our $Debug = 0;
  our $ExportLevel = 0;
  our $Verbose ||= 0;
  our $VERSION = '5.65';
  our (%Cache);
  
  sub as_heavy {
    require Exporter::Heavy;
    # Unfortunately, this does not work if the caller is aliased as *name = \&foo
    # Thus the need to create a lot of identical subroutines
    my $c = (caller(1))[3];
    $c =~ s/.*:://;
    \&{"Exporter::Heavy::heavy_$c"};
  }
  
  sub export {
    goto &{as_heavy()};
  }
  
  sub import {
    my $pkg = shift;
    my $callpkg = caller($ExportLevel);
  
    if ($pkg eq "Exporter" and @_ and $_[0] eq "import") {
      *{$callpkg."::import"} = \&import;
      return;
    }
  
    # We *need* to treat @{"$pkg\::EXPORT_FAIL"} since Carp uses it :-(
    my $exports = \@{"$pkg\::EXPORT"};
    # But, avoid creating things if they don't exist, which saves a couple of
    # hundred bytes per package processed.
    my $fail = ${$pkg . '::'}{EXPORT_FAIL} && \@{"$pkg\::EXPORT_FAIL"};
    return export $pkg, $callpkg, @_
      if $Verbose or $Debug or $fail && @$fail > 1;
    my $export_cache = ($Cache{$pkg} ||= {});
    my $args = @_ or @_ = @$exports;
  
    local $_;
    if ($args and not %$export_cache) {
      s/^&//, $export_cache->{$_} = 1
        foreach (@$exports, @{"$pkg\::EXPORT_OK"});
    }
    my $heavy;
    # Try very hard not to use {} and hence have to  enter scope on the foreach
    # We bomb out of the loop with last as soon as heavy is set.
    if ($args or $fail) {
      ($heavy = (/\W/ or $args and not exists $export_cache->{$_}
                 or $fail and @$fail and $_ eq $fail->[0])) and last
                   foreach (@_);
    } else {
      ($heavy = /\W/) and last
        foreach (@_);
    }
    return export $pkg, $callpkg, ($args ? @_ : ()) if $heavy;
    local $SIG{__WARN__} = 
  	sub {require Carp; &Carp::carp} if not $SIG{__WARN__};
    # shortcut for the common case of no type character
    *{"$callpkg\::$_"} = \&{"$pkg\::$_"} foreach @_;
  }
  
  # Default methods
  
  sub export_fail {
      my $self = shift;
      @_;
  }
  
  # Unfortunately, caller(1)[3] "does not work" if the caller is aliased as
  # *name = \&foo.  Thus the need to create a lot of identical subroutines
  # Otherwise we could have aliased them to export().
  
  sub export_to_level {
    goto &{as_heavy()};
  }
  
  sub export_tags {
    goto &{as_heavy()};
  }
  
  sub export_ok_tags {
    goto &{as_heavy()};
  }
  
  sub require_version {
    goto &{as_heavy()};
  }
  
  1;
  __END__
  
  =head1 NAME
  
  Exporter - Implements default import method for modules
  
  =head1 SYNOPSIS
  
  In module F<YourModule.pm>:
  
    package YourModule;
    require Exporter;
    @ISA = qw(Exporter);
    @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
  
  or
  
    package YourModule;
    use Exporter 'import'; # gives you Exporter's import() method directly
    @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
  
  In other files which wish to use C<YourModule>:
  
    use YourModule qw(frobnicate);      # import listed symbols
    frobnicate ($left, $right)          # calls YourModule::frobnicate
  
  Take a look at L</Good Practices> for some variants
  you will like to use in modern Perl code.
  
  =head1 DESCRIPTION
  
  The Exporter module implements an C<import> method which allows a module
  to export functions and variables to its users' namespaces. Many modules
  use Exporter rather than implementing their own C<import> method because
  Exporter provides a highly flexible interface, with an implementation optimised
  for the common case.
  
  Perl automatically calls the C<import> method when processing a
  C<use> statement for a module. Modules and C<use> are documented
  in L<perlfunc> and L<perlmod>. Understanding the concept of
  modules and how the C<use> statement operates is important to
  understanding the Exporter.
  
  =head2 How to Export
  
  The arrays C<@EXPORT> and C<@EXPORT_OK> in a module hold lists of
  symbols that are going to be exported into the users name space by
  default, or which they can request to be exported, respectively.  The
  symbols can represent functions, scalars, arrays, hashes, or typeglobs.
  The symbols must be given by full name with the exception that the
  ampersand in front of a function is optional, e.g.
  
      @EXPORT    = qw(afunc $scalar @array);   # afunc is a function
      @EXPORT_OK = qw(&bfunc %hash *typeglob); # explicit prefix on &bfunc
  
  If you are only exporting function names it is recommended to omit the
  ampersand, as the implementation is faster this way.
  
  =head2 Selecting What To Export
  
  Do B<not> export method names!
  
  Do B<not> export anything else by default without a good reason!
  
  Exports pollute the namespace of the module user.  If you must export
  try to use C<@EXPORT_OK> in preference to C<@EXPORT> and avoid short or
  common symbol names to reduce the risk of name clashes.
  
  Generally anything not exported is still accessible from outside the
  module using the C<YourModule::item_name> (or C<< $blessed_ref->method >>)
  syntax.  By convention you can use a leading underscore on names to
  informally indicate that they are 'internal' and not for public use.
  
  (It is actually possible to get private functions by saying:
  
    my $subref = sub { ... };
    $subref->(@args);            # Call it as a function
    $obj->$subref(@args);        # Use it as a method
  
  However if you use them for methods it is up to you to figure out
  how to make inheritance work.)
  
  As a general rule, if the module is trying to be object oriented
  then export nothing. If it's just a collection of functions then
  C<@EXPORT_OK> anything but use C<@EXPORT> with caution. For function and
  method names use barewords in preference to names prefixed with
  ampersands for the export lists.
  
  Other module design guidelines can be found in L<perlmod>.
  
  =head2 How to Import
  
  In other files which wish to use your module there are three basic ways for
  them to load your module and import its symbols:
  
  =over 4
  
  =item C<use YourModule;>
  
  This imports all the symbols from YourModule's C<@EXPORT> into the namespace
  of the C<use> statement.
  
  =item C<use YourModule ();>
  
  This causes perl to load your module but does not import any symbols.
  
  =item C<use YourModule qw(...);>
  
  This imports only the symbols listed by the caller into their namespace.
  All listed symbols must be in your C<@EXPORT> or C<@EXPORT_OK>, else an error
  occurs. The advanced export features of Exporter are accessed like this,
  but with list entries that are syntactically distinct from symbol names.
  
  =back
  
  Unless you want to use its advanced features, this is probably all you
  need to know to use Exporter.
  
  =head1 Advanced features
  
  =head2 Specialised Import Lists
  
  If any of the entries in an import list begins with !, : or / then
  the list is treated as a series of specifications which either add to
  or delete from the list of names to import. They are processed left to
  right. Specifications are in the form:
  
      [!]name         This name only
      [!]:DEFAULT     All names in @EXPORT
      [!]:tag         All names in $EXPORT_TAGS{tag} anonymous list
      [!]/pattern/    All names in @EXPORT and @EXPORT_OK which match
  
  A leading ! indicates that matching names should be deleted from the
  list of names to import.  If the first specification is a deletion it
  is treated as though preceded by :DEFAULT. If you just want to import
  extra names in addition to the default set you will still need to
  include :DEFAULT explicitly.
  
  e.g., F<Module.pm> defines:
  
      @EXPORT      = qw(A1 A2 A3 A4 A5);
      @EXPORT_OK   = qw(B1 B2 B3 B4 B5);
      %EXPORT_TAGS = (T1 => [qw(A1 A2 B1 B2)], T2 => [qw(A1 A2 B3 B4)]);
  
      Note that you cannot use tags in @EXPORT or @EXPORT_OK.
      Names in EXPORT_TAGS must also appear in @EXPORT or @EXPORT_OK.
  
  An application using Module can say something like:
  
      use Module qw(:DEFAULT :T2 !B3 A3);
  
  Other examples include:
  
      use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
      use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);
  
  Remember that most patterns (using //) will need to be anchored
  with a leading ^, e.g., C</^EXIT/> rather than C</EXIT/>.
  
  You can say C<BEGIN { $Exporter::Verbose=1 }> to see how the
  specifications are being processed and what is actually being imported
  into modules.
  
  =head2 Exporting without using Exporter's import method
  
  Exporter has a special method, 'export_to_level' which is used in situations
  where you can't directly call Exporter's import method. The export_to_level
  method looks like:
  
      MyPackage->export_to_level($where_to_export, $package, @what_to_export);
  
  where C<$where_to_export> is an integer telling how far up the calling stack
  to export your symbols, and C<@what_to_export> is an array telling what
  symbols *to* export (usually this is C<@_>).  The C<$package> argument is
  currently unused.
  
  For example, suppose that you have a module, A, which already has an
  import function:
  
      package A;
  
      @ISA = qw(Exporter);
      @EXPORT_OK = qw ($b);
  
      sub import
      {
  	$A::b = 1;     # not a very useful import method
      }
  
  and you want to Export symbol C<$A::b> back to the module that called 
  package A. Since Exporter relies on the import method to work, via 
  inheritance, as it stands Exporter::import() will never get called. 
  Instead, say the following:
  
      package A;
      @ISA = qw(Exporter);
      @EXPORT_OK = qw ($b);
  
      sub import
      {
  	$A::b = 1;
  	A->export_to_level(1, @_);
      }
  
  This will export the symbols one level 'above' the current package - ie: to 
  the program or module that used package A. 
  
  Note: Be careful not to modify C<@_> at all before you call export_to_level
  - or people using your package will get very unexplained results!
  
  =head2 Exporting without inheriting from Exporter
  
  By including Exporter in your C<@ISA> you inherit an Exporter's import() method
  but you also inherit several other helper methods which you probably don't
  want. To avoid this you can do
  
    package YourModule;
    use Exporter qw( import );
  
  which will export Exporter's own import() method into YourModule.
  Everything will work as before but you won't need to include Exporter in
  C<@YourModule::ISA>.
  
  Note: This feature was introduced in version 5.57
  of Exporter, released with perl 5.8.3.
  
  =head2 Module Version Checking
  
  The Exporter module will convert an attempt to import a number from a
  module into a call to C<< $module_name->require_version($value) >>. This can
  be used to validate that the version of the module being used is
  greater than or equal to the required version.
  
  The Exporter module supplies a default C<require_version> method which
  checks the value of C<$VERSION> in the exporting module.
  
  Since the default C<require_version> method treats the C<$VERSION> number as
  a simple numeric value it will regard version 1.10 as lower than
  1.9. For this reason it is strongly recommended that you use numbers
  with at least two decimal places, e.g., 1.09.
  
  =head2 Managing Unknown Symbols
  
  In some situations you may want to prevent certain symbols from being
  exported. Typically this applies to extensions which have functions
  or constants that may not exist on some systems.
  
  The names of any symbols that cannot be exported should be listed
  in the C<@EXPORT_FAIL> array.
  
  If a module attempts to import any of these symbols the Exporter
  will give the module an opportunity to handle the situation before
  generating an error. The Exporter will call an export_fail method
  with a list of the failed symbols:
  
    @failed_symbols = $module_name->export_fail(@failed_symbols);
  
  If the C<export_fail> method returns an empty list then no error is
  recorded and all the requested symbols are exported. If the returned
  list is not empty then an error is generated for each symbol and the
  export fails. The Exporter provides a default C<export_fail> method which
  simply returns the list unchanged.
  
  Uses for the C<export_fail> method include giving better error messages
  for some symbols and performing lazy architectural checks (put more
  symbols into C<@EXPORT_FAIL> by default and then take them out if someone
  actually tries to use them and an expensive check shows that they are
  usable on that platform).
  
  =head2 Tag Handling Utility Functions
  
  Since the symbols listed within C<%EXPORT_TAGS> must also appear in either
  C<@EXPORT> or C<@EXPORT_OK>, two utility functions are provided which allow
  you to easily add tagged sets of symbols to C<@EXPORT> or C<@EXPORT_OK>:
  
    %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
  
    Exporter::export_tags('foo');     # add aa, bb and cc to @EXPORT
    Exporter::export_ok_tags('bar');  # add aa, cc and dd to @EXPORT_OK
  
  Any names which are not tags are added to C<@EXPORT> or C<@EXPORT_OK>
  unchanged but will trigger a warning (with C<-w>) to avoid misspelt tags
  names being silently added to C<@EXPORT> or C<@EXPORT_OK>. Future versions
  may make this a fatal error.
  
  =head2 Generating combined tags
  
  If several symbol categories exist in C<%EXPORT_TAGS>, it's usually
  useful to create the utility ":all" to simplify "use" statements.
  
  The simplest way to do this is:
  
    %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
  
    # add all the other ":class" tags to the ":all" class,
    # deleting duplicates
    {
      my %seen;
  
      push @{$EXPORT_TAGS{all}},
        grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}} foreach keys %EXPORT_TAGS;
    }
  
  F<CGI.pm> creates an ":all" tag which contains some (but not really
  all) of its categories.  That could be done with one small
  change:
  
    # add some of the other ":class" tags to the ":all" class,
    # deleting duplicates
    {
      my %seen;
  
      push @{$EXPORT_TAGS{all}},
        grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}}
          foreach qw/html2 html3 netscape form cgi internal/;
    }
  
  Note that the tag names in C<%EXPORT_TAGS> don't have the leading ':'.
  
  =head2 C<AUTOLOAD>ed Constants
  
  Many modules make use of C<AUTOLOAD>ing for constant subroutines to
  avoid having to compile and waste memory on rarely used values (see
  L<perlsub> for details on constant subroutines).  Calls to such
  constant subroutines are not optimized away at compile time because
  they can't be checked at compile time for constancy.
  
  Even if a prototype is available at compile time, the body of the
  subroutine is not (it hasn't been C<AUTOLOAD>ed yet). perl needs to
  examine both the C<()> prototype and the body of a subroutine at
  compile time to detect that it can safely replace calls to that
  subroutine with the constant value.
  
  A workaround for this is to call the constants once in a C<BEGIN> block:
  
     package My ;
  
     use Socket ;
  
     foo( SO_LINGER );     ## SO_LINGER NOT optimized away; called at runtime
     BEGIN { SO_LINGER }
     foo( SO_LINGER );     ## SO_LINGER optimized away at compile time.
  
  This forces the C<AUTOLOAD> for C<SO_LINGER> to take place before
  SO_LINGER is encountered later in C<My> package.
  
  If you are writing a package that C<AUTOLOAD>s, consider forcing
  an C<AUTOLOAD> for any constants explicitly imported by other packages
  or which are usually used when your package is C<use>d.
  
  =head1 Good Practices
  
  =head2 Declaring C<@EXPORT_OK> and Friends
  
  When using C<Exporter> with the standard C<strict> and C<warnings>
  pragmas, the C<our> keyword is needed to declare the package
  variables C<@EXPORT_OK>, C<@EXPORT>, C<@ISA>, etc.
  
    our @ISA = qw(Exporter);
    our @EXPORT_OK = qw(munge frobnicate);
  
  If backward compatibility for Perls under 5.6 is important,
  one must write instead a C<use vars> statement.
  
    use vars qw(@ISA @EXPORT_OK);
    @ISA = qw(Exporter);
    @EXPORT_OK = qw(munge frobnicate);
  
  =head2 Playing Safe
  
  There are some caveats with the use of runtime statements
  like C<require Exporter> and the assignment to package
  variables, which can very subtle for the unaware programmer.
  This may happen for instance with mutually recursive
  modules, which are affected by the time the relevant
  constructions are executed.
  
  The ideal (but a bit ugly) way to never have to think
  about that is to use C<BEGIN> blocks. So the first part
  of the L</SYNOPSIS> code could be rewritten as:
  
    package YourModule;
  
    use strict;
    use warnings;
  
    our (@ISA, @EXPORT_OK);
    BEGIN {
       require Exporter;
       @ISA = qw(Exporter);
       @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
    }
  
  The C<BEGIN> will assure that the loading of F<Exporter.pm>
  and the assignments to C<@ISA> and C<@EXPORT_OK> happen
  immediately, leaving no room for something to get awry
  or just plain wrong.
  
  With respect to loading C<Exporter> and inheriting, there
  are alternatives with the use of modules like C<base> and C<parent>.
  
    use base qw( Exporter );
    # or
    use parent qw( Exporter );
  
  Any of these statements are nice replacements for
  C<BEGIN { require Exporter; @ISA = qw(Exporter); }>
  with the same compile-time effect. The basic difference
  is that C<base> code interacts with declared C<fields>
  while C<parent> is a streamlined version of the older
  C<base> code to just establish the IS-A relationship.
  
  For more details, see the documentation and code of
  L<base> and L<parent>.
  
  Another thorough remedy to that runtime vs. 
  compile-time trap is to use L<Exporter::Easy>,
  which is a wrapper of Exporter that allows all
  boilerplate code at a single gulp in the
  use statement.
  
     use Exporter::Easy (
         OK => [ qw(munge frobnicate) ],
     );
     # @ISA setup is automatic
     # all assignments happen at compile time
  
  =head2 What not to Export
  
  You have been warned already in L</Selecting What To Export>
  to not export:
  
  =over 4
  
  =item *
  
  method names (because you don't need to
  and that's likely to not do what you want),
  
  =item *
  
  anything by default (because you don't want to surprise your users...
  badly)
  
  =item *
  
  anything you don't need to (because less is more)
  
  =back
  
  There's one more item to add to this list. Do B<not>
  export variable names. Just because C<Exporter> lets you
  do that, it does not mean you should.
  
    @EXPORT_OK = qw( $svar @avar %hvar ); # DON'T!
  
  Exporting variables is not a good idea. They can
  change under the hood, provoking horrible
  effects at-a-distance, that are too hard to track
  and to fix. Trust me: they are not worth it.
  
  To provide the capability to set/get class-wide
  settings, it is best instead to provide accessors
  as subroutines or class methods instead.
  
  =head1 SEE ALSO
  
  C<Exporter> is definitely not the only module with
  symbol exporter capabilities. At CPAN, you may find
  a bunch of them. Some are lighter. Some
  provide improved APIs and features. Peek the one
  that fits your needs. The following is
  a sample list of such modules.
  
      Exporter::Easy
      Exporter::Lite
      Exporter::Renaming
      Exporter::Tidy
      Sub::Exporter / Sub::Installer
      Perl6::Export / Perl6::Export::Attrs
  
  =head1 LICENSE
  
  This library is free software. You can redistribute it
  and/or modify it under the same terms as Perl itself.
  
  =cut
  
  
  
EXPORTER

$fatpacked{"Exporter/Heavy.pm"} = <<'EXPORTER_HEAVY';
  package Exporter::Heavy;
  
  use strict;
  no strict 'refs';
  
  # On one line so MakeMaker will see it.
  require Exporter;  our $VERSION = $Exporter::VERSION;
  
  =head1 NAME
  
  Exporter::Heavy - Exporter guts
  
  =head1 SYNOPSIS
  
  (internal use only)
  
  =head1 DESCRIPTION
  
  No user-serviceable parts inside.
  
  =cut
  
  #
  # We go to a lot of trouble not to 'require Carp' at file scope,
  #  because Carp requires Exporter, and something has to give.
  #
  
  sub _rebuild_cache {
      my ($pkg, $exports, $cache) = @_;
      s/^&// foreach @$exports;
      @{$cache}{@$exports} = (1) x @$exports;
      my $ok = \@{"${pkg}::EXPORT_OK"};
      if (@$ok) {
  	s/^&// foreach @$ok;
  	@{$cache}{@$ok} = (1) x @$ok;
      }
  }
  
  sub heavy_export {
  
      # First make import warnings look like they're coming from the "use".
      local $SIG{__WARN__} = sub {
  	my $text = shift;
  	if ($text =~ s/ at \S*Exporter\S*.pm line \d+.*\n//) {
  	    require Carp;
  	    local $Carp::CarpLevel = 1;	# ignore package calling us too.
  	    Carp::carp($text);
  	}
  	else {
  	    warn $text;
  	}
      };
      local $SIG{__DIE__} = sub {
  	require Carp;
  	local $Carp::CarpLevel = 1;	# ignore package calling us too.
  	Carp::croak("$_[0]Illegal null symbol in \@${1}::EXPORT")
  	    if $_[0] =~ /^Unable to create sub named "(.*?)::"/;
      };
  
      my($pkg, $callpkg, @imports) = @_;
      my($type, $sym, $cache_is_current, $oops);
      my($exports, $export_cache) = (\@{"${pkg}::EXPORT"},
                                     $Exporter::Cache{$pkg} ||= {});
  
      if (@imports) {
  	if (!%$export_cache) {
  	    _rebuild_cache ($pkg, $exports, $export_cache);
  	    $cache_is_current = 1;
  	}
  
  	if (grep m{^[/!:]}, @imports) {
  	    my $tagsref = \%{"${pkg}::EXPORT_TAGS"};
  	    my $tagdata;
  	    my %imports;
  	    my($remove, $spec, @names, @allexports);
  	    # negated first item implies starting with default set:
  	    unshift @imports, ':DEFAULT' if $imports[0] =~ m/^!/;
  	    foreach $spec (@imports){
  		$remove = $spec =~ s/^!//;
  
  		if ($spec =~ s/^://){
  		    if ($spec eq 'DEFAULT'){
  			@names = @$exports;
  		    }
  		    elsif ($tagdata = $tagsref->{$spec}) {
  			@names = @$tagdata;
  		    }
  		    else {
  			warn qq["$spec" is not defined in %${pkg}::EXPORT_TAGS];
  			++$oops;
  			next;
  		    }
  		}
  		elsif ($spec =~ m:^/(.*)/$:){
  		    my $patn = $1;
  		    @allexports = keys %$export_cache unless @allexports; # only do keys once
  		    @names = grep(/$patn/, @allexports); # not anchored by default
  		}
  		else {
  		    @names = ($spec); # is a normal symbol name
  		}
  
  		warn "Import ".($remove ? "del":"add").": @names "
  		    if $Exporter::Verbose;
  
  		if ($remove) {
  		   foreach $sym (@names) { delete $imports{$sym} } 
  		}
  		else {
  		    @imports{@names} = (1) x @names;
  		}
  	    }
  	    @imports = keys %imports;
  	}
  
          my @carp;
  	foreach $sym (@imports) {
  	    if (!$export_cache->{$sym}) {
  		if ($sym =~ m/^\d/) {
  		    $pkg->VERSION($sym); # inherit from UNIVERSAL
  		    # If the version number was the only thing specified
  		    # then we should act as if nothing was specified:
  		    if (@imports == 1) {
  			@imports = @$exports;
  			last;
  		    }
  		    # We need a way to emulate 'use Foo ()' but still
  		    # allow an easy version check: "use Foo 1.23, ''";
  		    if (@imports == 2 and !$imports[1]) {
  			@imports = ();
  			last;
  		    }
  		} elsif ($sym !~ s/^&// || !$export_cache->{$sym}) {
  		    # Last chance - see if they've updated EXPORT_OK since we
  		    # cached it.
  
  		    unless ($cache_is_current) {
  			%$export_cache = ();
  			_rebuild_cache ($pkg, $exports, $export_cache);
  			$cache_is_current = 1;
  		    }
  
  		    if (!$export_cache->{$sym}) {
  			# accumulate the non-exports
  			push @carp,
  			  qq["$sym" is not exported by the $pkg module\n];
  			$oops++;
  		    }
  		}
  	    }
  	}
  	if ($oops) {
  	    require Carp;
  	    Carp::croak("@{carp}Can't continue after import errors");
  	}
      }
      else {
  	@imports = @$exports;
      }
  
      my($fail, $fail_cache) = (\@{"${pkg}::EXPORT_FAIL"},
                                $Exporter::FailCache{$pkg} ||= {});
  
      if (@$fail) {
  	if (!%$fail_cache) {
  	    # Build cache of symbols. Optimise the lookup by adding
  	    # barewords twice... both with and without a leading &.
  	    # (Technique could be applied to $export_cache at cost of memory)
  	    my @expanded = map { /^\w/ ? ($_, '&'.$_) : $_ } @$fail;
  	    warn "${pkg}::EXPORT_FAIL cached: @expanded" if $Exporter::Verbose;
  	    @{$fail_cache}{@expanded} = (1) x @expanded;
  	}
  	my @failed;
  	foreach $sym (@imports) { push(@failed, $sym) if $fail_cache->{$sym} }
  	if (@failed) {
  	    @failed = $pkg->export_fail(@failed);
  	    foreach $sym (@failed) {
                  require Carp;
  		Carp::carp(qq["$sym" is not implemented by the $pkg module ],
  			"on this architecture");
  	    }
  	    if (@failed) {
  		require Carp;
  		Carp::croak("Can't continue after import errors");
  	    }
  	}
      }
  
      warn "Importing into $callpkg from $pkg: ",
  		join(", ",sort @imports) if $Exporter::Verbose;
  
      foreach $sym (@imports) {
  	# shortcut for the common case of no type character
  	(*{"${callpkg}::$sym"} = \&{"${pkg}::$sym"}, next)
  	    unless $sym =~ s/^(\W)//;
  	$type = $1;
  	no warnings 'once';
  	*{"${callpkg}::$sym"} =
  	    $type eq '&' ? \&{"${pkg}::$sym"} :
  	    $type eq '$' ? \${"${pkg}::$sym"} :
  	    $type eq '@' ? \@{"${pkg}::$sym"} :
  	    $type eq '%' ? \%{"${pkg}::$sym"} :
  	    $type eq '*' ?  *{"${pkg}::$sym"} :
  	    do { require Carp; Carp::croak("Can't export symbol: $type$sym") };
      }
  }
  
  sub heavy_export_to_level
  {
        my $pkg = shift;
        my $level = shift;
        (undef) = shift;			# XXX redundant arg
        my $callpkg = caller($level);
        $pkg->export($callpkg, @_);
  }
  
  # Utility functions
  
  sub _push_tags {
      my($pkg, $var, $syms) = @_;
      my @nontag = ();
      my $export_tags = \%{"${pkg}::EXPORT_TAGS"};
      push(@{"${pkg}::$var"},
  	map { $export_tags->{$_} ? @{$export_tags->{$_}} 
                                   : scalar(push(@nontag,$_),$_) }
  		(@$syms) ? @$syms : keys %$export_tags);
      if (@nontag and $^W) {
  	# This may change to a die one day
  	require Carp;
  	Carp::carp(join(", ", @nontag)." are not tags of $pkg");
      }
  }
  
  sub heavy_require_version {
      my($self, $wanted) = @_;
      my $pkg = ref $self || $self;
      return ${pkg}->VERSION($wanted);
  }
  
  sub heavy_export_tags {
    _push_tags((caller)[0], "EXPORT",    \@_);
  }
  
  sub heavy_export_ok_tags {
    _push_tags((caller)[0], "EXPORT_OK", \@_);
  }
  
  1;
EXPORTER_HEAVY

$fatpacked{"Exporter/Lite.pm"} = <<'EXPORTER_LITE';
  package Exporter::Lite;
  
  require 5.004;
  
  # Using strict or vars almost doubles our load time.  Turn them back
  # on when debugging.
  #use strict 'vars';  # we're going to be doing a lot of sym refs
  #use vars qw($VERSION @EXPORT);
  
  $VERSION = 0.02;
  @EXPORT = qw(import);   # we'll know pretty fast if it doesn't work :)
  
  
  
  sub import {
      my($exporter, @imports)  = @_;
      my($caller, $file, $line) = caller;
  
      unless( @imports ) {        # Default import.
          @imports = @{$exporter.'::EXPORT'};
      }
      else {
          # Because @EXPORT_OK = () would indicate that nothing is
          # to be exported, we cannot simply check the length of @EXPORT_OK.
          # We must to oddness to see if the variable exists at all as
          # well as avoid autovivification.
          # XXX idea stolen from base.pm, this might be all unnecessary
          my $eokglob;
          if( $eokglob = ${$exporter.'::'}{EXPORT_OK} and *$eokglob{ARRAY} ) {
              if( @{$exporter.'::EXPORT_OK'} ) {
                  # This can also be cached.
                  my %ok = map { s/^&//; $_ => 1 } @{$exporter.'::EXPORT_OK'},
                                                   @{$exporter.'::EXPORT'};
  
                  my($denied) = grep {s/^&//; !$ok{$_}} @imports;
                  _not_exported($denied, $exporter, $file, $line) if $denied;
              }
              else {      # We don't export anything.
                  _not_exported($imports[0], $exporter, $file, $line);
              }
          }
      }
  
      _export($caller, $exporter, @imports);
  }
  
  
  
  sub _export {
      my($caller, $exporter, @imports) = @_;
  
      # Stole this from Exporter::Heavy.  I'm sure it can be written better
      # but I'm lazy at the moment.
      foreach my $sym (@imports) {
          # shortcut for the common case of no type character
          (*{$caller.'::'.$sym} = \&{$exporter.'::'.$sym}, next)
              unless $sym =~ s/^(\W)//;
  
          my $type = $1;
          my $caller_sym = $caller.'::'.$sym;
          my $export_sym = $exporter.'::'.$sym;
          *{$caller_sym} =
              $type eq '&' ? \&{$export_sym} :
              $type eq '$' ? \${$export_sym} :
              $type eq '@' ? \@{$export_sym} :
              $type eq '%' ? \%{$export_sym} :
              $type eq '*' ?  *{$export_sym} :
              do { require Carp; Carp::croak("Can't export symbol: $type$sym") };
      }
  }
  
  
  #"#
  sub _not_exported {
      my($thing, $exporter, $file, $line) = @_;
      die sprintf qq|"%s" is not exported by the %s module at %s line %d\n|,
          $thing, $exporter, $file, $line;
  }
  
  1;
  
  __END__
  
  =head1 NAME
  
  Exporter::Lite - Lightweight exporting of variables
  
  =head1 SYNOPSIS
  
    package Foo;
    use Exporter::Lite;
  
    # Just like Exporter.
    @EXPORT       = qw($This That);
    @EXPORT_OK    = qw(@Left %Right);
  
  
    # Meanwhile, in another piece of code!
    package Bar;
    use Foo;  # exports $This and &That.
  
  
  =head1 DESCRIPTION
  
  This is an alternative to Exporter intended to provide a lightweight
  subset of its functionality.  It supports C<import()>, C<@EXPORT> and
  C<@EXPORT_OK> and not a whole lot else.
  
  Unlike Exporter, it is not necessary to inherit from Exporter::Lite
  (ie. no C<@ISA = qw(Exporter::Lite)> mantra).  Exporter::Lite simply
  exports its import() function.  This might be called a "mix-in".
  
  Setting up a module to export its variables and functions is simple:
  
      package My::Module;
      use Exporter::Lite;
  
      @EXPORT = qw($Foo bar);
  
  now when you C<use My::Module>, C<$Foo> and C<bar()> will show up.
  
  In order to make exporting optional, use @EXPORT_OK.
  
      package My::Module;
      use Exporter::Lite;
  
      @EXPORT_OK = qw($Foo bar);
  
  when My::Module is used, C<$Foo> and C<bar()> will I<not> show up.
  You have to ask for them.  C<use My::Module qw($Foo bar)>.
  
  =head1 Methods
  
  Export::Lite has one public method, import(), which is called
  automaticly when your modules is use()'d.  
  
  In normal usage you don't have to worry about this at all.
  
  =over 4
  
  =item B<import>
  
    Some::Module->import;
    Some::Module->import(@symbols);
  
  Works just like C<Exporter::import()> excepting it only honors
  @Some::Module::EXPORT and @Some::Module::EXPORT_OK.
  
  The given @symbols are exported to the current package provided they
  are in @Some::Module::EXPORT or @Some::Module::EXPORT_OK.  Otherwise
  an exception is thrown (ie. the program dies).
  
  If @symbols is not given, everything in @Some::Module::EXPORT is
  exported.
  
  =back
  
  =head1 DIAGNOSTICS
  
  =over 4
  
  =item '"%s" is not exported by the %s module'
  
  Attempted to import a symbol which is not in @EXPORT or @EXPORT_OK.
  
  =item 'Can\'t export symbol: %s'
  
  Attempted to import a symbol of an unknown type (ie. the leading $@% salad
  wasn't recognized).
  
  =back
  
  =head1 BUGS and CAVEATS
  
  Its not yet clear if this is actually any lighter or faster than
  Exporter.  I know its at least on par.
  
  OTOH, the docs are much clearer and not having to say C<@ISA =
  qw(Exporter)> is kinda nice.
  
  =head1 AUTHORS
  
  Michael G Schwern <schwern@pobox.com>
  
  =head1 LICENSE
  
  This program is free software; you can redistribute it and/or
  modify it under the same terms as Perl itself.
  
  See F<http://www.perl.com/perl/misc/Artistic.html>
  
  =head1 SEE ALSO
  
  L<Exporter>, L<Exporter::Simple>, L<UNIVERSAL::exports>
  
  =cut
EXPORTER_LITE

$fatpacked{"File/Which.pm"} = <<'FILE_WHICH';
  package File::Which;
  
  use 5.004;
  use strict;
  use Exporter   ();
  use File::Spec ();
  
  use vars qw{$VERSION @ISA @EXPORT @EXPORT_OK};
  BEGIN {
  	$VERSION   = '1.09';
  	@ISA       = 'Exporter';
  	@EXPORT    = 'which';
  	@EXPORT_OK = 'where';
  }
  
  use constant IS_VMS => ($^O eq 'VMS');
  use constant IS_MAC => ($^O eq 'MacOS');
  use constant IS_DOS => ($^O eq 'MSWin32' or $^O eq 'dos' or $^O eq 'os2');
  
  # For Win32 systems, stores the extensions used for
  # executable files
  # For others, the empty string is used
  # because 'perl' . '' eq 'perl' => easier
  my @PATHEXT = ('');
  if ( IS_DOS ) {
  	# WinNT. PATHEXT might be set on Cygwin, but not used.
  	if ( $ENV{PATHEXT} ) {
  		push @PATHEXT, split ';', $ENV{PATHEXT};
  	} else {
  		# Win9X or other: doesn't have PATHEXT, so needs hardcoded.
  		push @PATHEXT, qw{.com .exe .bat};
  	}
  } elsif ( IS_VMS ) {
  	push @PATHEXT, qw{.exe .com};
  }
  
  sub which {
  	my ($exec) = @_;
  
  	return undef unless $exec;
  
  	my $all = wantarray;
  	my @results = ();
  
  	# check for aliases first
  	if ( IS_VMS ) {
  		my $symbol = `SHOW SYMBOL $exec`;
  		chomp($symbol);
  		unless ( $? ) {
  			return $symbol unless $all;
  			push @results, $symbol;
  		}
  	}
  	if ( IS_MAC ) {
  		my @aliases = split /\,/, $ENV{Aliases};
  		foreach my $alias ( @aliases ) {
  			# This has not been tested!!
  			# PPT which says MPW-Perl cannot resolve `Alias $alias`,
  			# let's just hope it's fixed
  			if ( lc($alias) eq lc($exec) ) {
  				chomp(my $file = `Alias $alias`);
  				last unless $file;  # if it failed, just go on the normal way
  				return $file unless $all;
  				push @results, $file;
  				# we can stop this loop as if it finds more aliases matching,
  				# it'll just be the same result anyway
  				last;
  			}
  		}
  	}
  
  	my @path = File::Spec->path;
  	if ( IS_DOS or IS_VMS or IS_MAC ) {
  		unshift @path, File::Spec->curdir;
  	}
  
  	foreach my $base ( map { File::Spec->catfile($_, $exec) } @path ) {
  		for my $ext ( @PATHEXT ) {
  			my $file = $base.$ext;
  
  			# We don't want dirs (as they are -x)
  			next if -d $file;
  
  			if (
  				# Executable, normal case
  				-x _
  				or (
  					# MacOS doesn't mark as executable so we check -e
  					IS_MAC
  					||
  					(
  						IS_DOS
  						and
  						grep {
  							$file =~ /$_\z/i
  						} @PATHEXT[1..$#PATHEXT]
  					)
  					# DOSish systems don't pass -x on
  					# non-exe/bat/com files. so we check -e.
  					# However, we don't want to pass -e on files
  					# that aren't in PATHEXT, like README.
  					and -e _
  				)
  			) {
  				return $file unless $all;
  				push @results, $file;
  			}
  		}
  	}
  
  	if ( $all ) {
  		return @results;
  	} else {
  		return undef;
  	}
  }
  
  sub where {
  	# force wantarray
  	my @res = which($_[0]);
  	return @res;
  }
  
  1;
  
  __END__
  
  =pod
  
  =head1 NAME
  
  File::Which - Portable implementation of the `which' utility
  
  =head1 SYNOPSIS
  
    use File::Which;                  # exports which()
    use File::Which qw(which where);  # exports which() and where()
    
    my $exe_path = which('perldoc');
    
    my @paths = where('perl');
    - Or -
    my @paths = which('perl'); # an array forces search for all of them
  
  =head1 DESCRIPTION
  
  C<File::Which> was created to be able to get the paths to executable programs
  on systems under which the `which' program wasn't implemented in the shell.
  
  C<File::Which> searches the directories of the user's C<PATH> (as returned by
  C<File::Spec-E<gt>path()>), looking for executable files having the name
  specified as a parameter to C<which()>. Under Win32 systems, which do not have a
  notion of directly executable files, but uses special extensions such as C<.exe>
  and C<.bat> to identify them, C<File::Which> takes extra steps to assure that
  you will find the correct file (so for example, you might be searching for
  C<perl>, it'll try F<perl.exe>, F<perl.bat>, etc.)
  
  =head1 Steps Used on Win32, DOS, OS2 and VMS
  
  =head2 Windows NT
  
  Windows NT has a special environment variable called C<PATHEXT>, which is used
  by the shell to look for executable files. Usually, it will contain a list in
  the form C<.EXE;.BAT;.COM;.JS;.VBS> etc. If C<File::Which> finds such an
  environment variable, it parses the list and uses it as the different
  extensions.
  
  =head2 Windows 9x and other ancient Win/DOS/OS2
  
  This set of operating systems don't have the C<PATHEXT> variable, and usually
  you will find executable files there with the extensions C<.exe>, C<.bat> and
  (less likely) C<.com>. C<File::Which> uses this hardcoded list if it's running
  under Win32 but does not find a C<PATHEXT> variable.
  
  =head2 VMS
  
  Same case as Windows 9x: uses C<.exe> and C<.com> (in that order).
  
  =head1 Functions
  
  =head2 which($short_exe_name)
  
  Exported by default.
  
  C<$short_exe_name> is the name used in the shell to call the program (for
  example, C<perl>).
  
  If it finds an executable with the name you specified, C<which()> will return
  the absolute path leading to this executable (for example, F</usr/bin/perl> or
  F<C:\Perl\Bin\perl.exe>).
  
  If it does I<not> find the executable, it returns C<undef>.
  
  If C<which()> is called in list context, it will return I<all> the
  matches.
  
  =head2 where($short_exe_name)
  
  Not exported by default.
  
  Same as C<which($short_exe_name)> in array context. Same as the
  C<`where'> utility, will return an array containing all the path names
  matching C<$short_exe_name>.
  
  =head1 BUGS AND CAVEATS
  
  Not tested on VMS or MacOS, although there is platform specific code
  for those. Anyone who haves a second would be very kind to send me a
  report of how it went.
  
  File::Spec adds the current directory to the front of PATH if on
  Win32, VMS or MacOS. I have no knowledge of those so don't know if the
  current directory is searced first or not. Could someone please tell
  me?
  
  =head1 SUPPORT
  
  Bugs should be reported via the CPAN bug tracker at
  
  L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=File-Which>
  
  For other issues, contact the maintainer.
  
  =head1 AUTHOR
  
  Adam Kennedy E<lt>adamk@cpan.orgE<gt>
  
  Per Einar Ellefsen E<lt>pereinar@cpan.orgE<gt>
  
  Originated in F<modperl-2.0/lib/Apache/Build.pm>. Changed for use in DocSet
  (for the mod_perl site) and Win32-awareness by me, with slight modifications
  by Stas Bekman, then extracted to create C<File::Which>.
  
  Version 0.04 had some significant platform-related changes, taken from
  the Perl Power Tools C<`which'> implementation by Abigail with
  enhancements from Peter Prymmer. See
  L<http://www.perl.com/language/ppt/src/which/index.html> for more
  information.
  
  =head1 COPYRIGHT
  
  Copyright 2002 Per Einar Ellefsen.
  
  Some parts copyright 2009 Adam Kennedy.
  
  This program is free software; you can redistribute it and/or modify
  it under the same terms as Perl itself.
  
  =head1 SEE ALSO
  
  L<File::Spec>, L<which(1)>, Perl Power Tools:
  L<http://www.perl.com/language/ppt/index.html>.
  
  =cut
FILE_WHICH

$fatpacked{"lib/core/only.pm"} = <<'LIB_CORE_ONLY';
  package lib::core::only;
  
  use strict;
  use warnings FATAL => 'all';
  use Config;
  
  sub import {
    @INC = @Config{qw(privlibexp archlibexp)};
    return
  }
  
  =head1 NAME
  
  lib::core::only - Remove all non-core paths from @INC to avoid site/vendor dirs
  
  =head1 SYNOPSIS
  
    use lib::core::only; # now @INC contains only the two core directories
  
  To get only the core directories plus the ones for the local::lib in scope:
  
    $ perl -Mlib::core::only -Mlocal::lib=~/perl5 myscript.pl
  
  To attempt to do a self-contained build (but note this will not reliably
  propagate into subprocesses, see the CAVEATS below):
  
    $ PERL5OPT='-Mlib::core::only -Mlocal::lib=~/perl5' cpan
  
  =head1 DESCRIPTION
  
  lib::core::only is simply a shortcut to say "please reduce my @INC to only
  the core lib and archlib (architecture-specific lib) directories of this perl".
  
  You might want to do this to ensure a local::lib contains only the code you
  need, or to test an L<App::FatPacker|App::FatPacker> tree, or to avoid known
  bad vendor packages.
  
  You might want to use this to try and install a self-contained tree of perl
  modules. Be warned that that probably won't work (see L</CAVEATS>).
  
  This module was extracted from L<local::lib|local::lib>'s --self-contained
  feature, and contains the only part that ever worked. I apologise to anybody
  who thought anything else did.
  
  =head1 CAVEATS
  
  This does B<not> propagate properly across perl invocations like local::lib's
  stuff does. It can't. It's only a module import, so it B<only affects the
  specific perl VM instance in which you load and import() it>.
  
  If you want to cascade it across invocations, you can set the PERL5OPT
  environment variable to '-Mlib::core::only' and it'll sort of work. But be
  aware that taint mode ignores this, so some modules' build and test code
  probably will as well.
  
  You also need to be aware that perl's command line options are not processed
  in order - -I options take effect before -M options, so
  
    perl -Mlib::core::only -Ilib
  
  is unlike to do what you want - it's exactly equivalent to:
  
    perl -Mlib::core::only
  
  If you want to combine a core-only @INC with additional paths, you need to
  add the additional paths using -M options and the L<lib|lib> module:
  
    perl -Mlib::core::only -Mlib=lib
  
    # or if you're trying to test compiled code:
  
    perl -Mlib::core::only -Mblib
  
  For more information on the impossibility of sanely propagating this across
  module builds without help from the build program, see
  L<http://www.shadowcat.co.uk/blog/matt-s-trout/tainted-love> - and for ways
  to achieve the old --self-contained feature's results, look at
  L<App::FatPacker|App::FatPacker>'s tree function, and at
  L<App::cpanminus|cpanm>'s --local-lib-contained feature.
  
  =head1 AUTHOR
  
  Matt S. Trout <mst@shadowcat.co.uk>
  
  =head1 LICENSE
  
  This library is free software under the same terms as perl itself.
  
  =head1 COPYRIGHT
  
  (c) 2010 the lib::core::only L</AUTHOR> as specified above.
  
  =cut
  
  1;
LIB_CORE_ONLY

$fatpacked{"local/lib.pm"} = <<'LOCAL_LIB';
  use strict;
  use warnings;
  
  package local::lib;
  
  use 5.008001; # probably works with earlier versions but I'm not supporting them
                # (patches would, of course, be welcome)
  
  use File::Spec ();
  use File::Path ();
  use Carp ();
  use Config;
  
  our $VERSION = '1.008004'; # 1.8.4
  
  our @KNOWN_FLAGS = qw(--self-contained --deactivate --deactivate-all);
  
  sub DEACTIVATE_ONE () { 1 }
  sub DEACTIVATE_ALL () { 2 }
  
  sub INTERPOLATE_ENV () { 1 }
  sub LITERAL_ENV     () { 0 }
  
  sub import {
    my ($class, @args) = @_;
  
    # Remember what PERL5LIB was when we started
    my $perl5lib = $ENV{PERL5LIB} || '';
  
    my %arg_store;
    for my $arg (@args) {
      # check for lethal dash first to stop processing before causing problems
      if ($arg =~ /−/) {
        die <<'DEATH';
  WHOA THERE! It looks like you've got some fancy dashes in your commandline!
  These are *not* the traditional -- dashes that software recognizes. You
  probably got these by copy-pasting from the perldoc for this module as
  rendered by a UTF8-capable formatter. This most typically happens on an OS X
  terminal, but can happen elsewhere too. Please try again after replacing the
  dashes with normal minus signs.
  DEATH
      }
      elsif(grep { $arg eq $_ } @KNOWN_FLAGS) {
        (my $flag = $arg) =~ s/--//;
        $arg_store{$flag} = 1;
      }
      elsif($arg =~ /^--/) {
        die "Unknown import argument: $arg";
      }
      else {
        # assume that what's left is a path
        $arg_store{path} = $arg;
      }
    }
  
    if($arg_store{'self-contained'}) {
      die "FATAL: The local::lib --self-contained flag has never worked reliably and the original author, Mark Stosberg, was unable or unwilling to maintain it. As such, this flag has been removed from the local::lib codebase in order to prevent misunderstandings and potentially broken builds. The local::lib authors recommend that you look at the lib::core::only module shipped with this distribution in order to create a more robust environment that is equivalent to what --self-contained provided (although quite possibly not what you originally thought it provided due to the poor quality of the documentation, for which we apologise).\n";
    }
  
    my $deactivating = 0;
    if ($arg_store{deactivate}) {
      $deactivating = DEACTIVATE_ONE;
    }
    if ($arg_store{'deactivate-all'}) {
      $deactivating = DEACTIVATE_ALL;
    }
  
    $arg_store{path} = $class->resolve_path($arg_store{path});
    $class->setup_local_lib_for($arg_store{path}, $deactivating);
  
    for (@INC) { # Untaint @INC
      next if ref; # Skip entry if it is an ARRAY, CODE, blessed, etc.
      m/(.*)/ and $_ = $1;
    }
  }
  
  sub pipeline;
  
  sub pipeline {
    my @methods = @_;
    my $last = pop(@methods);
    if (@methods) {
      \sub {
        my ($obj, @args) = @_;
        $obj->${pipeline @methods}(
          $obj->$last(@args)
        );
      };
    } else {
      \sub {
        shift->$last(@_);
      };
    }
  }
  
  =begin testing
  
  #:: test pipeline
  
  package local::lib;
  
  { package Foo; sub foo { -$_[1] } sub bar { $_[1]+2 } sub baz { $_[1]+3 } }
  my $foo = bless({}, 'Foo');                                                 
  Test::More::ok($foo->${pipeline qw(foo bar baz)}(10) == -15);
  
  =end testing
  
  =cut
  
  sub _uniq {
      my %seen;
      grep { ! $seen{$_}++ } @_;
  }
  
  sub resolve_path {
    my ($class, $path) = @_;
    $class->${pipeline qw(
      resolve_relative_path
      resolve_home_path
      resolve_empty_path
    )}($path);
  }
  
  sub resolve_empty_path {
    my ($class, $path) = @_;
    if (defined $path) {
      $path;
    } else {
      '~/perl5';
    }
  }
  
  =begin testing
  
  #:: test classmethod setup
  
  my $c = 'local::lib';
  
  =end testing
  
  =begin testing
  
  #:: test classmethod
  
  is($c->resolve_empty_path, '~/perl5');
  is($c->resolve_empty_path('foo'), 'foo');
  
  =end testing
  
  =cut
  
  sub resolve_home_path {
    my ($class, $path) = @_;
    return $path unless ($path =~ /^~/);
    my ($user) = ($path =~ /^~([^\/]+)/); # can assume ^~ so undef for 'us'
    my $tried_file_homedir;
    my $homedir = do {
      if (eval { require File::HomeDir } && $File::HomeDir::VERSION >= 0.65) {
        $tried_file_homedir = 1;
        if (defined $user) {
          File::HomeDir->users_home($user);
        } else {
          File::HomeDir->my_home;
        }
      } else {
        if (defined $user) {
          (getpwnam $user)[7];
        } else {
          if (defined $ENV{HOME}) {
            $ENV{HOME};
          } else {
            (getpwuid $<)[7];
          }
        }
      }
    };
    unless (defined $homedir) {
      Carp::croak(
        "Couldn't resolve homedir for "
        .(defined $user ? $user : 'current user')
        .($tried_file_homedir ? '' : ' - consider installing File::HomeDir')
      );
    }
    $path =~ s/^~[^\/]*/$homedir/;
    $path;
  }
  
  sub resolve_relative_path {
    my ($class, $path) = @_;
    $path = File::Spec->rel2abs($path);
  }
  
  =begin testing
  
  #:: test classmethod
  
  local *File::Spec::rel2abs = sub { shift; 'FOO'.shift; };
  is($c->resolve_relative_path('bar'),'FOObar');
  
  =end testing
  
  =cut
  
  sub setup_local_lib_for {
    my ($class, $path, $deactivating) = @_;
  
    my $interpolate = LITERAL_ENV;
    my @active_lls = $class->active_paths;
  
    $path = $class->ensure_dir_structure_for($path);
  
    if (! $deactivating) {
      if (@active_lls && $active_lls[-1] eq $path) {
        exit 0 if $0 eq '-';
        return; # Asked to add what's already at the top of the stack
      } elsif (grep { $_ eq $path} @active_lls) {
        # Asked to add a dir that's lower in the stack -- so we remove it from
        # where it is, and then add it back at the top.
        $class->setup_env_hash_for($path, DEACTIVATE_ONE);
        # Which means we can no longer output "PERL5LIB=...:$PERL5LIB" stuff
        # anymore because we're taking something *out*.
        $interpolate = INTERPOLATE_ENV;
      }
    }
  
    if ($0 eq '-') {
      $class->print_environment_vars_for($path, $deactivating, $interpolate);
      exit 0;
    } else {
      $class->setup_env_hash_for($path, $deactivating);
      @INC = _uniq(split($Config{path_sep}, $ENV{PERL5LIB}), @INC);
    }
  }
  
  sub install_base_bin_path {
    my ($class, $path) = @_;
    File::Spec->catdir($path, 'bin');
  }
  
  sub install_base_perl_path {
    my ($class, $path) = @_;
    File::Spec->catdir($path, 'lib', 'perl5');
  }
  
  sub install_base_arch_path {
    my ($class, $path) = @_;
    File::Spec->catdir($class->install_base_perl_path($path), $Config{archname});
  }
  
  sub ensure_dir_structure_for {
    my ($class, $path) = @_;
    unless (-d $path) {
      warn "Attempting to create directory ${path}\n";
    }
    File::Path::mkpath($path);
    # Need to have the path exist to make a short name for it, so
    # converting to a short name here.
    $path = Win32::GetShortPathName($path) if $^O eq 'MSWin32';
  
    return $path;
  }
  
  sub guess_shelltype {
    my $shellbin = 'sh';
    if(defined $ENV{'SHELL'}) {
        my @shell_bin_path_parts = File::Spec->splitpath($ENV{'SHELL'});
        $shellbin = $shell_bin_path_parts[-1];
    }
    my $shelltype = do {
        local $_ = $shellbin;
        if(/csh/) {
            'csh'
        } else {
            'bourne'
        }
    };
  
    # Both Win32 and Cygwin have $ENV{COMSPEC} set.
    if (defined $ENV{'COMSPEC'} && $^O ne 'cygwin') {
        my @shell_bin_path_parts = File::Spec->splitpath($ENV{'COMSPEC'});
        $shellbin = $shell_bin_path_parts[-1];
           $shelltype = do {
                   local $_ = $shellbin;
                   if(/command\.com/) {
                           'win32'
                   } elsif(/cmd\.exe/) {
                           'win32'
                   } elsif(/4nt\.exe/) {
                           'win32'
                   } else {
                           $shelltype
                   }
           };
    }
    return $shelltype;
  }
  
  sub print_environment_vars_for {
    my ($class, $path, $deactivating, $interpolate) = @_;
    print $class->environment_vars_string_for($path, $deactivating, $interpolate);
  }
  
  sub environment_vars_string_for {
    my ($class, $path, $deactivating, $interpolate) = @_;
    my @envs = $class->build_environment_vars_for($path, $deactivating, $interpolate);
    my $out = '';
  
    # rather basic csh detection, goes on the assumption that something won't
    # call itself csh unless it really is. also, default to bourne in the
    # pathological situation where a user doesn't have $ENV{SHELL} defined.
    # note also that shells with funny names, like zoid, are assumed to be
    # bourne.
  
    my $shelltype = $class->guess_shelltype;
  
    while (@envs) {
      my ($name, $value) = (shift(@envs), shift(@envs));
      $value =~ s/(\\")/\\$1/g if defined $value;
      $out .= $class->${\"build_${shelltype}_env_declaration"}($name, $value);
    }
    return $out;
  }
  
  # simple routines that take two arguments: an %ENV key and a value. return
  # strings that are suitable for passing directly to the relevant shell to set
  # said key to said value.
  sub build_bourne_env_declaration {
    my $class = shift;
    my($name, $value) = @_;
    return defined($value) ? qq{export ${name}="${value}";\n} : qq{unset ${name};\n};
  }
  
  sub build_csh_env_declaration {
    my $class = shift;
    my($name, $value) = @_;
    return defined($value) ? qq{setenv ${name} "${value}"\n} : qq{unsetenv ${name}\n};
  }
  
  sub build_win32_env_declaration {
    my $class = shift;
    my($name, $value) = @_;
    return defined($value) ? qq{set ${name}=${value}\n} : qq{set ${name}=\n};
  }
  
  sub setup_env_hash_for {
    my ($class, $path, $deactivating) = @_;
    my %envs = $class->build_environment_vars_for($path, $deactivating, INTERPOLATE_ENV);
    @ENV{keys %envs} = values %envs;
  }
  
  sub build_environment_vars_for {
    my ($class, $path, $deactivating, $interpolate) = @_;
  
    if ($deactivating == DEACTIVATE_ONE) {
      return $class->build_deactivate_environment_vars_for($path, $interpolate);
    } elsif ($deactivating == DEACTIVATE_ALL) {
      return $class->build_deact_all_environment_vars_for($path, $interpolate);
    } else {
      return $class->build_activate_environment_vars_for($path, $interpolate);
    }
  }
  
  sub build_activate_environment_vars_for {
    my ($class, $path, $interpolate) = @_;
    return (
      PERL_LOCAL_LIB_ROOT => join($Config{path_sep},
                (($ENV{PERL_LOCAL_LIB_ROOT}||()) ?
                  ($interpolate == INTERPOLATE_ENV
                    ? ($ENV{PERL_LOCAL_LIB_ROOT}||())
                    : (($^O ne 'MSWin32') ? '$PERL_LOCAL_LIB_ROOT' 
                      : '%PERL_LOCAL_LIB_ROOT%' ))
                  : ()),
                  $path
              ),
      PERL_MB_OPT => "--install_base ${path}",
      PERL_MM_OPT => "INSTALL_BASE=${path}",
      PERL5LIB => join($Config{path_sep},
                    $class->install_base_arch_path($path),
                    $class->install_base_perl_path($path),
                    (($ENV{PERL5LIB}||()) ?
                      ($interpolate == INTERPOLATE_ENV
                        ? ($ENV{PERL5LIB})
                        : (($^O ne 'MSWin32') ? '$PERL5LIB' : '%PERL5LIB%' ))
                      : ())
                  ),
      PATH => join($Config{path_sep},
                $class->install_base_bin_path($path),
                ($interpolate == INTERPOLATE_ENV
                  ? ($ENV{PATH}||())
                  : (($^O ne 'MSWin32') ? '$PATH' : '%PATH%' ))
               ),
    )
  }
  
  sub active_paths {
    my ($class) = @_;
  
    return () unless defined $ENV{PERL_LOCAL_LIB_ROOT};
    return split /\Q$Config{path_sep}/, $ENV{PERL_LOCAL_LIB_ROOT};
  }
  
  sub build_deactivate_environment_vars_for {
    my ($class, $path, $interpolate) = @_;
  
    my @active_lls = $class->active_paths;
  
    if (!grep { $_ eq $path } @active_lls) {
      warn "Tried to deactivate inactive local::lib '$path'\n";
      return ();
    }
  
    my @new_ll_root = grep { $_ ne $path } @active_lls;
    my @new_perl5lib = grep {
      $_ ne $class->install_base_arch_path($path) &&
      $_ ne $class->install_base_perl_path($path)
    } split /\Q$Config{path_sep}/, $ENV{PERL5LIB};
  
    my %env = (
      PERL_LOCAL_LIB_ROOT => (@new_ll_root ?
        join($Config{path_sep}, @new_ll_root) : undef
      ),
      PERL5LIB => (@new_perl5lib ?
        join($Config{path_sep}, @new_perl5lib) : undef
      ),
      PATH => join($Config{path_sep},
        grep { $_ ne $class->install_base_bin_path($path) }
        split /\Q$Config{path_sep}/, $ENV{PATH}
      ),
    );
  
    # If removing ourselves from the "top of the stack", set install paths to
    # correspond with the new top of stack.
    if ($active_lls[-1] eq $path) {
      if (@active_lls > 1) {
        my $new_top = $active_lls[-2];
        %env = (%env,
          PERL_MB_OPT => "--install_base ${new_top}",
          PERL_MM_OPT => "INSTALL_BASE=${new_top}",
        );
      } else {
        %env = (%env,
          PERL_MB_OPT => undef,
          PERL_MM_OPT => undef,
        );
      }
    }
  
    return %env;
  }
  
  sub build_deact_all_environment_vars_for {
    my ($class, $path, $interpolate) = @_;
  
    my @active_lls = $class->active_paths;
  
    my @new_perl5lib = split /\Q$Config{path_sep}/, $ENV{PERL5LIB};
    my @new_path = split /\Q$Config{path_sep}/, $ENV{PATH};
  
    for my $path (@active_lls) {
      @new_perl5lib = grep {
        $_ ne $class->install_base_arch_path($path) &&
        $_ ne $class->install_base_perl_path($path)
      } @new_perl5lib;
  
      @new_path = grep {
        $_ ne $class->install_base_bin_path($path)
      } @new_path;
    }
  
    my %env = (
      PERL_LOCAL_LIB_ROOT => undef,
      PERL_MM_OPT => undef,
      PERL_MB_OPT => undef,
      PERL5LIB => (@new_perl5lib ?
        join($Config{path_sep}, @new_perl5lib) : undef
      ),
      PATH => join($Config{path_sep}, @new_path),
    );
  
    return %env;
  }
  
  =begin testing
  
  #:: test classmethod
  
  File::Path::rmtree('t/var/splat');
  
  $c->ensure_dir_structure_for('t/var/splat');
  
  ok(-d 't/var/splat');
  
  =end testing
  
  =encoding utf8
  
  =head1 NAME
  
  local::lib - create and use a local lib/ for perl modules with PERL5LIB
  
  =head1 SYNOPSIS
  
  In code -
  
    use local::lib; # sets up a local lib at ~/perl5
  
    use local::lib '~/foo'; # same, but ~/foo
  
    # Or...
    use FindBin;
    use local::lib "$FindBin::Bin/../support";  # app-local support library
  
  From the shell -
  
    # Install LWP and its missing dependencies to the '~/perl5' directory
    perl -MCPAN -Mlocal::lib -e 'CPAN::install(LWP)'
  
    # Just print out useful shell commands
    $ perl -Mlocal::lib
    export PERL_MB_OPT='--install_base /home/username/perl5'
    export PERL_MM_OPT='INSTALL_BASE=/home/username/perl5'
    export PERL5LIB='/home/username/perl5/lib/perl5/i386-linux:/home/username/perl5/lib/perl5'
    export PATH="/home/username/perl5/bin:$PATH"
  
  =head2 The bootstrapping technique
  
  A typical way to install local::lib is using what is known as the
  "bootstrapping" technique.  You would do this if your system administrator
  hasn't already installed local::lib.  In this case, you'll need to install
  local::lib in your home directory. 
  
  If you do have administrative privileges, you will still want to set up your 
  environment variables, as discussed in step 4. Without this, you would still
  install the modules into the system CPAN installation and also your Perl scripts
  will not use the lib/ path you bootstrapped with local::lib.
  
  By default local::lib installs itself and the CPAN modules into ~/perl5.
  
  Windows users must also see L</Differences when using this module under Win32>.
  
  1. Download and unpack the local::lib tarball from CPAN (search for "Download"
  on the CPAN page about local::lib).  Do this as an ordinary user, not as root
  or administrator.  Unpack the file in your home directory or in any other
  convenient location.
  
  2. Run this:
  
    perl Makefile.PL --bootstrap
  
  If the system asks you whether it should automatically configure as much
  as possible, you would typically answer yes.
  
  In order to install local::lib into a directory other than the default, you need
  to specify the name of the directory when you call bootstrap, as follows:
  
    perl Makefile.PL --bootstrap=~/foo
  
  3. Run this: (local::lib assumes you have make installed on your system)
  
    make test && make install
  
  4. Now we need to setup the appropriate environment variables, so that Perl 
  starts using our newly generated lib/ directory. If you are using bash or
  any other Bourne shells, you can add this to your shell startup script this
  way:
  
    echo 'eval $(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib)' >>~/.bashrc
  
  If you are using C shell, you can do this as follows:
  
    /bin/csh
    echo $SHELL
    /bin/csh
    perl -I$HOME/perl5/lib/perl5 -Mlocal::lib >> ~/.cshrc
  
  If you passed to bootstrap a directory other than default, you also need to give that as 
  import parameter to the call of the local::lib module like this way:
  
    echo 'eval $(perl -I$HOME/foo/lib/perl5 -Mlocal::lib=$HOME/foo)' >>~/.bashrc
  
  After writing your shell configuration file, be sure to re-read it to get the
  changed settings into your current shell's environment. Bourne shells use 
  C<. ~/.bashrc> for this, whereas C shells use C<source ~/.cshrc>.
  
  If you're on a slower machine, or are operating under draconian disk space
  limitations, you can disable the automatic generation of manpages from POD when
  installing modules by using the C<--no-manpages> argument when bootstrapping:
  
    perl Makefile.PL --bootstrap --no-manpages
  
  To avoid doing several bootstrap for several Perl module environments on the 
  same account, for example if you use it for several different deployed 
  applications independently, you can use one bootstrapped local::lib 
  installation to install modules in different directories directly this way:
  
    cd ~/mydir1
    perl -Mlocal::lib=./
    eval $(perl -Mlocal::lib=./)  ### To set the environment for this shell alone
    printenv                      ### You will see that ~/mydir1 is in the PERL5LIB
    perl -MCPAN -e install ...    ### whatever modules you want
    cd ../mydir2
    ... REPEAT ...
  
  If you are working with several C<local::lib> environments, you may want to
  remove some of them from the current environment without disturbing the others.
  You can deactivate one environment like this (using bourne sh):
  
    eval $(perl -Mlocal::lib=--deactivate,~/path)
  
  which will generate and run the commands needed to remove C<~/path> from your
  various search paths. Whichever environment was B<activated most recently> will
  remain the target for module installations. That is, if you activate
  C<~/path_A> and then you activate C<~/path_B>, new modules you install will go
  in C<~/path_B>. If you deactivate C<~/path_B> then modules will be installed
  into C<~/pathA> -- but if you deactivate C<~/path_A> then they will still be
  installed in C<~/pathB> because pathB was activated later.
  
  You can also ask C<local::lib> to clean itself completely out of the current
  shell's environment with the C<--deactivate-all> option.
  For multiple environments for multiple apps you may need to include a modified
  version of the C<< use FindBin >> instructions in the "In code" sample above.
  If you did something like the above, you have a set of Perl modules at C<<
  ~/mydir1/lib >>. If you have a script at C<< ~/mydir1/scripts/myscript.pl >>,
  you need to tell it where to find the modules you installed for it at C<<
  ~/mydir1/lib >>.
  
  In C<< ~/mydir1/scripts/myscript.pl >>:
  
    use strict;
    use warnings;
    use local::lib "$FindBin::Bin/..";  ### points to ~/mydir1 and local::lib finds lib
    use lib "$FindBin::Bin/../lib";     ### points to ~/mydir1/lib
  
  Put this before any BEGIN { ... } blocks that require the modules you installed.
  
  =head2 Differences when using this module under Win32
  
  To set up the proper environment variables for your current session of
  C<CMD.exe>, you can use this:
  
    C:\>perl -Mlocal::lib
    set PERL_MB_OPT=--install_base C:\DOCUME~1\ADMINI~1\perl5
    set PERL_MM_OPT=INSTALL_BASE=C:\DOCUME~1\ADMINI~1\perl5
    set PERL5LIB=C:\DOCUME~1\ADMINI~1\perl5\lib\perl5;C:\DOCUME~1\ADMINI~1\perl5\lib\perl5\MSWin32-x86-multi-thread
    set PATH=C:\DOCUME~1\ADMINI~1\perl5\bin;%PATH%
    
    ### To set the environment for this shell alone
    C:\>perl -Mlocal::lib > %TEMP%\tmp.bat && %TEMP%\tmp.bat && del %TEMP%\temp.bat
    ### instead of $(perl -Mlocal::lib=./)
  
  If you want the environment entries to persist, you'll need to add then to the
  Control Panel's System applet yourself or use L<App::local::lib::Win32Helper>.
  
  The "~" is translated to the user's profile directory (the directory named for
  the user under "Documents and Settings" (Windows XP or earlier) or "Users"
  (Windows Vista or later)) unless $ENV{HOME} exists. After that, the home
  directory is translated to a short name (which means the directory must exist)
  and the subdirectories are created.
  
  =head1 RATIONALE
  
  The version of a Perl package on your machine is not always the version you
  need.  Obviously, the best thing to do would be to update to the version you
  need.  However, you might be in a situation where you're prevented from doing
  this.  Perhaps you don't have system administrator privileges; or perhaps you
  are using a package management system such as Debian, and nobody has yet gotten
  around to packaging up the version you need.
  
  local::lib solves this problem by allowing you to create your own directory of
  Perl packages downloaded from CPAN (in a multi-user system, this would typically
  be within your own home directory).  The existing system Perl installation is
  not affected; you simply invoke Perl with special options so that Perl uses the
  packages in your own local package directory rather than the system packages.
  local::lib arranges things so that your locally installed version of the Perl
  packages takes precedence over the system installation.
  
  If you are using a package management system (such as Debian), you don't need to
  worry about Debian and CPAN stepping on each other's toes.  Your local version
  of the packages will be written to an entirely separate directory from those
  installed by Debian.  
  
  =head1 DESCRIPTION
  
  This module provides a quick, convenient way of bootstrapping a user-local Perl
  module library located within the user's home directory. It also constructs and
  prints out for the user the list of environment variables using the syntax
  appropriate for the user's current shell (as specified by the C<SHELL>
  environment variable), suitable for directly adding to one's shell
  configuration file.
  
  More generally, local::lib allows for the bootstrapping and usage of a
  directory containing Perl modules outside of Perl's C<@INC>. This makes it
  easier to ship an application with an app-specific copy of a Perl module, or
  collection of modules. Useful in cases like when an upstream maintainer hasn't
  applied a patch to a module of theirs that you need for your application.
  
  On import, local::lib sets the following environment variables to appropriate
  values:
  
  =over 4
  
  =item PERL_MB_OPT
  
  =item PERL_MM_OPT
  
  =item PERL5LIB
  
  =item PATH
  
  PATH is appended to, rather than clobbered.
  
  =back
  
  These values are then available for reference by any code after import.
  
  =head1 CREATING A SELF-CONTAINED SET OF MODULES
  
  See L<lib::core::only> for one way to do this - but note that
  there are a number of caveats, and the best approach is always to perform a
  build against a clean perl (i.e. site and vendor as close to empty as possible).
  
  =head1 OPTIONS
  
  Options are values that can be passed to the C<local::lib> import besides the
  directory to use. They are specified as C<use local::lib '--option'[, path];>
  or C<perl -Mlocal::lib=--option[,path]>.
  
  =head2 --deactivate
  
  Remove the chosen path (or the default path) from the module search paths if it
  was added by C<local::lib>, instead of adding it.
  
  =head2 --deactivate-all
  
  Remove all directories that were added to search paths by C<local::lib> from the
  search paths.
  
  =head1 METHODS
  
  =head2 ensure_dir_structure_for
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: None
  
  =back
  
  Attempts to create the given path, and all required parent directories. Throws
  an exception on failure.
  
  =head2 print_environment_vars_for
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: None
  
  =back
  
  Prints to standard output the variables listed above, properly set to use the
  given path as the base directory.
  
  =head2 build_environment_vars_for
  
  =over 4
  
  =item Arguments: $path, $interpolate
  
  =item Return value: \%environment_vars
  
  =back
  
  Returns a hash with the variables listed above, properly set to use the
  given path as the base directory.
  
  =head2 setup_env_hash_for
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: None
  
  =back
  
  Constructs the C<%ENV> keys for the given path, by calling
  L</build_environment_vars_for>.
  
  =head2 active_paths
  
  =over 4
  
  =item Arguments: None
  
  =item Return value: @paths
  
  =back
  
  Returns a list of active C<local::lib> paths, according to the
  C<PERL_LOCAL_LIB_ROOT> environment variable.
  
  =head2 install_base_perl_path
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: $install_base_perl_path
  
  =back
  
  Returns a path describing where to install the Perl modules for this local
  library installation. Appends the directories C<lib> and C<perl5> to the given
  path.
  
  =head2 install_base_arch_path
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: $install_base_arch_path
  
  =back
  
  Returns a path describing where to install the architecture-specific Perl
  modules for this local library installation. Based on the
  L</install_base_perl_path> method's return value, and appends the value of
  C<$Config{archname}>.
  
  =head2 install_base_bin_path
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: $install_base_bin_path
  
  =back
  
  Returns a path describing where to install the executable programs for this
  local library installation. Based on the L</install_base_perl_path> method's
  return value, and appends the directory C<bin>.
  
  =head2 resolve_empty_path
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: $base_path
  
  =back
  
  Builds and returns the base path into which to set up the local module
  installation. Defaults to C<~/perl5>.
  
  =head2 resolve_home_path
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: $home_path
  
  =back
  
  Attempts to find the user's home directory. If installed, uses C<File::HomeDir>
  for this purpose. If no definite answer is available, throws an exception.
  
  =head2 resolve_relative_path
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: $absolute_path
  
  =back
  
  Translates the given path into an absolute path.
  
  =head2 resolve_path
  
  =over 4
  
  =item Arguments: $path
  
  =item Return value: $absolute_path
  
  =back
  
  Calls the following in a pipeline, passing the result from the previous to the
  next, in an attempt to find where to configure the environment for a local
  library installation: L</resolve_empty_path>, L</resolve_home_path>,
  L</resolve_relative_path>. Passes the given path argument to
  L</resolve_empty_path> which then returns a result that is passed to
  L</resolve_home_path>, which then has its result passed to
  L</resolve_relative_path>. The result of this final call is returned from
  L</resolve_path>.
  
  =head1 A WARNING ABOUT UNINST=1
  
  Be careful about using local::lib in combination with "make install UNINST=1".
  The idea of this feature is that will uninstall an old version of a module
  before installing a new one. However it lacks a safety check that the old
  version and the new version will go in the same directory. Used in combination
  with local::lib, you can potentially delete a globally accessible version of a
  module while installing the new version in a local place. Only combine "make
  install UNINST=1" and local::lib if you understand these possible consequences.
  
  =head1 LIMITATIONS
  
  The perl toolchain is unable to handle directory names with spaces in it,
  so you cant put your local::lib bootstrap into a directory with spaces. What
  you can do is moving your local::lib to a directory with spaces B<after> you
  installed all modules inside your local::lib bootstrap. But be aware that you
  cant update or install CPAN modules after the move.
  
  Rather basic shell detection. Right now anything with csh in its name is
  assumed to be a C shell or something compatible, and everything else is assumed
  to be Bourne, except on Win32 systems. If the C<SHELL> environment variable is
  not set, a Bourne-compatible shell is assumed.
  
  Bootstrap is a hack and will use CPAN.pm for ExtUtils::MakeMaker even if you
  have CPANPLUS installed.
  
  Kills any existing PERL5LIB, PERL_MM_OPT or PERL_MB_OPT.
  
  Should probably auto-fixup CPAN config if not already done.
  
  Patches very much welcome for any of the above.
  
  On Win32 systems, does not have a way to write the created environment variables
  to the registry, so that they can persist through a reboot.
  
  =head1 TROUBLESHOOTING
  
  If you've configured local::lib to install CPAN modules somewhere in to your
  home directory, and at some point later you try to install a module with C<cpan
  -i Foo::Bar>, but it fails with an error like: C<Warning: You do not have
  permissions to install into /usr/lib64/perl5/site_perl/5.8.8/x86_64-linux at
  /usr/lib64/perl5/5.8.8/Foo/Bar.pm> and buried within the install log is an
  error saying C<'INSTALL_BASE' is not a known MakeMaker parameter name>, then
  you've somehow lost your updated ExtUtils::MakeMaker module.
  
  To remedy this situation, rerun the bootstrapping procedure documented above.
  
  Then, run C<rm -r ~/.cpan/build/Foo-Bar*>
  
  Finally, re-run C<cpan -i Foo::Bar> and it should install without problems.
  
  =head1 ENVIRONMENT
  
  =over 4
  
  =item SHELL
  
  =item COMSPEC
  
  local::lib looks at the user's C<SHELL> environment variable when printing out
  commands to add to the shell configuration file.
  
  On Win32 systems, C<COMSPEC> is also examined.
  
  =back
  
  =head1 SUPPORT
  
  IRC:
  
      Join #local-lib on irc.perl.org.
  
  =head1 AUTHOR
  
  Matt S Trout <mst@shadowcat.co.uk> http://www.shadowcat.co.uk/
  
  auto_install fixes kindly sponsored by http://www.takkle.com/
  
  =head1 CONTRIBUTORS
  
  Patches to correctly output commands for csh style shells, as well as some
  documentation additions, contributed by Christopher Nehren <apeiron@cpan.org>.
  
  Doc patches for a custom local::lib directory, more cleanups in the english
  documentation and a L<german documentation|POD2::DE::local::lib> contributed by Torsten Raudssus
  <torsten@raudssus.de>.
  
  Hans Dieter Pearcey <hdp@cpan.org> sent in some additional tests for ensuring
  things will install properly, submitted a fix for the bug causing problems with
  writing Makefiles during bootstrapping, contributed an example program, and
  submitted yet another fix to ensure that local::lib can install and bootstrap
  properly. Many, many thanks!
  
  pattern of Freenode IRC contributed the beginnings of the Troubleshooting
  section. Many thanks!
  
  Patch to add Win32 support contributed by Curtis Jewell <csjewell@cpan.org>.
  
  Warnings for missing PATH/PERL5LIB (as when not running interactively) silenced
  by a patch from Marco Emilio Poleggi.
  
  Mark Stosberg <mark@summersault.com> provided the code for the now deleted
  '--self-contained' option.
  
  Documentation patches to make win32 usage clearer by
  David Mertens <dcmertens.perl@gmail.com> (run4flat).
  
  Brazilian L<portuguese translation|POD2::PT_BR::local::lib> and minor doc patches contributed by Breno
  G. de Oliveira <garu@cpan.org>.
  
  Improvements to stacking multiple local::lib dirs and removing them from the
  environment later on contributed by Andrew Rodland <arodland@cpan.org>.
  
  =head1 COPYRIGHT
  
  Copyright (c) 2007 - 2010 the local::lib L</AUTHOR> and L</CONTRIBUTORS> as
  listed above.
  
  =head1 LICENSE
  
  This library is free software and may be distributed under the same terms
  as perl itself.
  
  =cut
  
  1;
LOCAL_LIB

s/^  //mg for values %fatpacked;

unshift @INC, sub {
  if (my $fat = $fatpacked{$_[1]}) {
    if ($] < 5.008) {
      return sub {
        return 0 unless length $fat;
        $fat =~ s/^([^\n]*\n?)//;
        $_ = $1;
        return 1;
      };
    }
    open my $fh, '<', \$fat
      or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
    return $fh;
  }
  return
};

} # END OF FATPACK CODE

use strict;
use warnings;

use FindBin qw($Bin);
use lib "$Bin/../lib", "$Bin/../fatlib";
use App::shelly;

use Pod::Usage;

unless (caller) {
    my $app = App::shelly->new;
    $app->parse_options(@ARGV);
    if ( $app->{help} ) {
        pod2usage( verbose => 1, -exitval => 'noexit' );
    }
    $app->doit or exit(1);
}

__END__

=head1 NAME

App::shelly

=head1 SYNOPSIS

$ shly [options] [atom...]

=head1 OPTIONS

=over 4

=item B<-h, --help>

Show this help.

=item B<-I, --impl [implementation]>

Tell what Lisp implementation to use. The default is $LISP_IMPL.

=item B<-L, --load [library1,library2,...]>

Load libraries before executing the expression.

=item B<--verbose>

Print some informations.

=item B<--no-init>

Do not load the user init file.

=item B<--debug>

This flag is for Shelly developers.

=back

